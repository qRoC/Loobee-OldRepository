// This file is part of the Loobee package.
//
// (c) Andrey Savitsky <contact@qroc.pro>
//
// For the full copyright and license information, please view the LICENSE
// file that was distributed with this source code.

internal class MemoryArenaBlock {

}

/// An arena is a collection of allocated objects that can be efficiently deallocated all at once.
public class MemoryArena {
//    public func allocate(size: Size) -> UnsafeRawPointer
//    {
//
//    }
}


/// List - проблемы когда нам нужно искать элемент(проходить по листу) - очень медленно.
/// Intrusive List - Не хранит копии объектов, он хранит сами объекты, из-за этого в сами объекты нужно добавить
/// дополнительные поля для работы с таким списком, из-за этого он так и называется "назойливым списком"
/// Из этого вытекает огромное преимущество - список не должен выделять какую-либо память для вставки объектов.
/// В обычном листе при вставке, будет создан объект узла, содержащий копию объекта.
/// В Intrusive списке только обновятся указатели на следующий и на предыдущий элемент вставленного объекта.
/// Другой плюс - если у вас есть ссылка на объект, вы можете напрямую получить итератор к этому объекту в О(1),
/// в то время как в обычном списке будет О(n).
/// Из минусов это само добавление данных в объект. Из этого ещё вытекает что сложней становится управлять временем жизни
/// объектов - если удалить объект, но не обновить информацию в листе - лист будет сломан.

/// slist - это самый простой Intrusive список - он добавляет 1 указатель на узел.
/// Из минусов что многие операции имеют линейную временную сложность, например swap.
/// Это связано с тем, что объект предоставляет только итератор вперёд.
